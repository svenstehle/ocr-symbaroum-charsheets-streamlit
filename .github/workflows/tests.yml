# This workflow will install Python dependencies, run tests with a variety of Python and OS versions
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: tests

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  DEBUG: false
  TESSDATA_PREXIX: /usr/local/share/tessdata
  ubuntu_debug: |
    sudo apt update
    sudo apt upgrade
    sudo apt install -y tesseract-ocr tesseract-ocr-eng tesseract-ocr-deu
    mkdir $TESSDATA_PREFIX
    cd $TESSDATA_PREFIX
    wget https://github.com/tesseract-ocr/tessdata_best/raw/main/eng.traineddata
    wget https://github.com/tesseract-ocr/tessdata_best/raw/main/deu.traineddata
    export TESSDATA_PREFIX=$TESSDATA_PREFIX
    tesseract --list-langs
  ubuntu_cmd: sudo apt install -y tesseract-ocr tesseract-ocr-eng tesseract-ocr-deu

jobs:
  test:
    runs-on: ${{ matrix.system.os }}
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.8"]
        # python-version: ["3.8", "3.9"]
        system: [
          {os: "ubuntu-latest", cmd: "${{ env.ubuntu_cmd }}", debug: "${{ env.ubuntu_debug }}"},
          # {os: "macos-latest", cmd: "brew update && brew upgrade && brew install tesseract-lang"}
        ]

        # sudo apt-get install -y libglib2.0-0 libnss3 libgconf-2-4 libfontconfig1 && \
        # sudo apt-get install -y libswscale-dev libtbb2 libtbb-dev libjpeg-dev libpng-dev libtiff-dev libopenjp2-7-dev libavformat-dev libpq-dev && \
        # sudo apt-get install -y tesseract-ocr tesseract-ocr-eng tesseract-ocr-deu libtesseract-dev libleptonica-dev ldconfig libsm6 libxext6 python-opencv

    steps:
    - name: Install System Dependencies Debug
      if: ${{ env.DEBUG == 'true' }}
      run: ${{ matrix.system.debug }}

    - name: Install System Dependencies Prod
      if: ${{ env.DEBUG == 'false' }}
      run: ${{ matrix.system.cmd }}

    - uses: actions/checkout@v3
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v3
      with:
        python-version: ${{ matrix.python-version }}
        architecture: x64

    - name: Install Python Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install poetry
        poetry config virtualenvs.create true
        poetry install

    - name: Install chromedriver
      run: |
        poetry run seleniumbase install chromedriver latest
        poetry run sbase install chromedriver latest

    - name: Start Streamlit app
      run: |
        nohup poetry run streamlit run src/app.py &

    - name: Sleep for 8 seconds
      uses: jakejarvis/wait-action@master
      with:
        time: '8s'

    - name: Testing the Code with Pytest
      run: PYTHONPATH=./src poetry run pytest tests/unit/ocr --cov-report=xml --cov

    - name: Upload Coverage to Codecov
      uses: codecov/codecov-action@v2
      with:
        files: coverage.xml,./coverage.xml
        fail_ci_if_error: false
